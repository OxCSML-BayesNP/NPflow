// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __NPflow_RcppExports_h__
#define __NPflow_RcppExports_h__

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace NPflow {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("NPflow", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("NPflow", "NPflow_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in NPflow");
            }
        }
    }

    inline double FmeasureC(NumericVector pred, NumericVector ref) {
        typedef SEXP(*Ptr_FmeasureC)(SEXP,SEXP);
        static Ptr_FmeasureC p_FmeasureC = NULL;
        if (p_FmeasureC == NULL) {
            validateSignature("double(*FmeasureC)(NumericVector,NumericVector)");
            p_FmeasureC = (Ptr_FmeasureC)R_GetCCallable("NPflow", "NPflow_FmeasureC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_FmeasureC(Rcpp::wrap(pred), Rcpp::wrap(ref));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double FmeasureC_no0(NumericVector pred, NumericVector ref) {
        typedef SEXP(*Ptr_FmeasureC_no0)(SEXP,SEXP);
        static Ptr_FmeasureC_no0 p_FmeasureC_no0 = NULL;
        if (p_FmeasureC_no0 == NULL) {
            validateSignature("double(*FmeasureC_no0)(NumericVector,NumericVector)");
            p_FmeasureC_no0 = (Ptr_FmeasureC_no0)R_GetCCallable("NPflow", "NPflow_FmeasureC_no0");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_FmeasureC_no0(Rcpp::wrap(pred), Rcpp::wrap(ref));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline List Fmeasure_costC(arma::mat c) {
        typedef SEXP(*Ptr_Fmeasure_costC)(SEXP);
        static Ptr_Fmeasure_costC p_Fmeasure_costC = NULL;
        if (p_Fmeasure_costC == NULL) {
            validateSignature("List(*Fmeasure_costC)(arma::mat)");
            p_Fmeasure_costC = (Ptr_Fmeasure_costC)R_GetCCallable("NPflow", "NPflow_Fmeasure_costC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_Fmeasure_costC(Rcpp::wrap(c));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List NuMatParC(NumericVector c, arma::mat d) {
        typedef SEXP(*Ptr_NuMatParC)(SEXP,SEXP);
        static Ptr_NuMatParC p_NuMatParC = NULL;
        if (p_NuMatParC == NULL) {
            validateSignature("List(*NuMatParC)(NumericVector,arma::mat)");
            p_NuMatParC = (Ptr_NuMatParC)R_GetCCallable("NPflow", "NPflow_NuMatParC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_NuMatParC(Rcpp::wrap(c), Rcpp::wrap(d));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline NumericVector traceEpsC(arma::mat eps, arma::mat sigma) {
        typedef SEXP(*Ptr_traceEpsC)(SEXP,SEXP);
        static Ptr_traceEpsC p_traceEpsC = NULL;
        if (p_traceEpsC == NULL) {
            validateSignature("NumericVector(*traceEpsC)(arma::mat,arma::mat)");
            p_traceEpsC = (Ptr_traceEpsC)R_GetCCallable("NPflow", "NPflow_traceEpsC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_traceEpsC(Rcpp::wrap(eps), Rcpp::wrap(sigma));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericMatrix mmNiWpdfC(arma::mat Mu, List Sigma, arma::mat U_Mu0, NumericVector U_Kappa0, NumericVector U_Nu0, List U_Sigma0, bool Log = true) {
        typedef SEXP(*Ptr_mmNiWpdfC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_mmNiWpdfC p_mmNiWpdfC = NULL;
        if (p_mmNiWpdfC == NULL) {
            validateSignature("NumericMatrix(*mmNiWpdfC)(arma::mat,List,arma::mat,NumericVector,NumericVector,List,bool)");
            p_mmNiWpdfC = (Ptr_mmNiWpdfC)R_GetCCallable("NPflow", "NPflow_mmNiWpdfC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mmNiWpdfC(Rcpp::wrap(Mu), Rcpp::wrap(Sigma), Rcpp::wrap(U_Mu0), Rcpp::wrap(U_Kappa0), Rcpp::wrap(U_Nu0), Rcpp::wrap(U_Sigma0), Rcpp::wrap(Log));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline double lgamma_mvC(double x, double p) {
        typedef SEXP(*Ptr_lgamma_mvC)(SEXP,SEXP);
        static Ptr_lgamma_mvC p_lgamma_mvC = NULL;
        if (p_lgamma_mvC == NULL) {
            validateSignature("double(*lgamma_mvC)(double,double)");
            p_lgamma_mvC = (Ptr_lgamma_mvC)R_GetCCallable("NPflow", "NPflow_lgamma_mvC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_lgamma_mvC(Rcpp::wrap(x), Rcpp::wrap(p));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline NumericMatrix mmsNiWpdfC(arma::mat xi, arma::mat psi, List Sigma, arma::mat U_xi0, arma::mat U_psi0, List U_B0, List U_Sigma0, NumericVector U_df0, bool Log = true) {
        typedef SEXP(*Ptr_mmsNiWpdfC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_mmsNiWpdfC p_mmsNiWpdfC = NULL;
        if (p_mmsNiWpdfC == NULL) {
            validateSignature("NumericMatrix(*mmsNiWpdfC)(arma::mat,arma::mat,List,arma::mat,arma::mat,List,List,NumericVector,bool)");
            p_mmsNiWpdfC = (Ptr_mmsNiWpdfC)R_GetCCallable("NPflow", "NPflow_mmsNiWpdfC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mmsNiWpdfC(Rcpp::wrap(xi), Rcpp::wrap(psi), Rcpp::wrap(Sigma), Rcpp::wrap(U_xi0), Rcpp::wrap(U_psi0), Rcpp::wrap(U_B0), Rcpp::wrap(U_Sigma0), Rcpp::wrap(U_df0), Rcpp::wrap(Log));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline NumericMatrix mmvnpdfC(NumericMatrix x, NumericMatrix mean, List varcovM, bool Log = true) {
        typedef SEXP(*Ptr_mmvnpdfC)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_mmvnpdfC p_mmvnpdfC = NULL;
        if (p_mmvnpdfC == NULL) {
            validateSignature("NumericMatrix(*mmvnpdfC)(NumericMatrix,NumericMatrix,List,bool)");
            p_mmvnpdfC = (Ptr_mmvnpdfC)R_GetCCallable("NPflow", "NPflow_mmvnpdfC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mmvnpdfC(Rcpp::wrap(x), Rcpp::wrap(mean), Rcpp::wrap(varcovM), Rcpp::wrap(Log));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline NumericMatrix mmvsnpdfC(NumericMatrix x, NumericMatrix xi, NumericMatrix psi, List sigma, bool Log = true) {
        typedef SEXP(*Ptr_mmvsnpdfC)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_mmvsnpdfC p_mmvsnpdfC = NULL;
        if (p_mmvsnpdfC == NULL) {
            validateSignature("NumericMatrix(*mmvsnpdfC)(NumericMatrix,NumericMatrix,NumericMatrix,List,bool)");
            p_mmvsnpdfC = (Ptr_mmvsnpdfC)R_GetCCallable("NPflow", "NPflow_mmvsnpdfC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mmvsnpdfC(Rcpp::wrap(x), Rcpp::wrap(xi), Rcpp::wrap(psi), Rcpp::wrap(sigma), Rcpp::wrap(Log));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline NumericMatrix mmvstpdfC(arma::mat x, arma::mat xi, arma::mat psi, List sigma, NumericVector df, bool Log = true) {
        typedef SEXP(*Ptr_mmvstpdfC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_mmvstpdfC p_mmvstpdfC = NULL;
        if (p_mmvstpdfC == NULL) {
            validateSignature("NumericMatrix(*mmvstpdfC)(arma::mat,arma::mat,arma::mat,List,NumericVector,bool)");
            p_mmvstpdfC = (Ptr_mmvstpdfC)R_GetCCallable("NPflow", "NPflow_mmvstpdfC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mmvstpdfC(Rcpp::wrap(x), Rcpp::wrap(xi), Rcpp::wrap(psi), Rcpp::wrap(sigma), Rcpp::wrap(df), Rcpp::wrap(Log));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline NumericMatrix mmvtpdfC(NumericMatrix x, NumericMatrix mean, List varcovM, NumericVector df, bool Log = true) {
        typedef SEXP(*Ptr_mmvtpdfC)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_mmvtpdfC p_mmvtpdfC = NULL;
        if (p_mmvtpdfC == NULL) {
            validateSignature("NumericMatrix(*mmvtpdfC)(NumericMatrix,NumericMatrix,List,NumericVector,bool)");
            p_mmvtpdfC = (Ptr_mmvtpdfC)R_GetCCallable("NPflow", "NPflow_mmvtpdfC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mmvtpdfC(Rcpp::wrap(x), Rcpp::wrap(mean), Rcpp::wrap(varcovM), Rcpp::wrap(df), Rcpp::wrap(Log));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericMatrix >(__result);
    }

    inline NumericVector mvnpdfC(NumericMatrix x, NumericVector mean, NumericMatrix varcovM, bool Log = true) {
        typedef SEXP(*Ptr_mvnpdfC)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_mvnpdfC p_mvnpdfC = NULL;
        if (p_mvnpdfC == NULL) {
            validateSignature("NumericVector(*mvnpdfC)(NumericMatrix,NumericVector,NumericMatrix,bool)");
            p_mvnpdfC = (Ptr_mvnpdfC)R_GetCCallable("NPflow", "NPflow_mvnpdfC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mvnpdfC(Rcpp::wrap(x), Rcpp::wrap(mean), Rcpp::wrap(varcovM), Rcpp::wrap(Log));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline List mvstlikC(arma::mat x, arma::vec c, arma::vec clustval, arma::mat xi, arma::mat psi, List sigma, NumericVector df, bool loglik = true) {
        typedef SEXP(*Ptr_mvstlikC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_mvstlikC p_mvstlikC = NULL;
        if (p_mvstlikC == NULL) {
            validateSignature("List(*mvstlikC)(arma::mat,arma::vec,arma::vec,arma::mat,arma::mat,List,NumericVector,bool)");
            p_mvstlikC = (Ptr_mvstlikC)R_GetCCallable("NPflow", "NPflow_mvstlikC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mvstlikC(Rcpp::wrap(x), Rcpp::wrap(c), Rcpp::wrap(clustval), Rcpp::wrap(xi), Rcpp::wrap(psi), Rcpp::wrap(sigma), Rcpp::wrap(df), Rcpp::wrap(loglik));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline IntegerVector sampleClassC(arma::mat probMat) {
        typedef SEXP(*Ptr_sampleClassC)(SEXP);
        static Ptr_sampleClassC p_sampleClassC = NULL;
        if (p_sampleClassC == NULL) {
            validateSignature("IntegerVector(*sampleClassC)(arma::mat)");
            p_sampleClassC = (Ptr_sampleClassC)R_GetCCallable("NPflow", "NPflow_sampleClassC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sampleClassC(Rcpp::wrap(probMat));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<IntegerVector >(__result);
    }

    inline List similarityMatC(arma::mat cc) {
        typedef SEXP(*Ptr_similarityMatC)(SEXP);
        static Ptr_similarityMatC p_similarityMatC = NULL;
        if (p_similarityMatC == NULL) {
            validateSignature("List(*similarityMatC)(arma::mat)");
            p_similarityMatC = (Ptr_similarityMatC)R_GetCCallable("NPflow", "NPflow_similarityMatC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_similarityMatC(Rcpp::wrap(cc));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List similarityMat_nocostC(arma::mat cc) {
        typedef SEXP(*Ptr_similarityMat_nocostC)(SEXP);
        static Ptr_similarityMat_nocostC p_similarityMat_nocostC = NULL;
        if (p_similarityMat_nocostC == NULL) {
            validateSignature("List(*similarityMat_nocostC)(arma::mat)");
            p_similarityMat_nocostC = (Ptr_similarityMat_nocostC)R_GetCCallable("NPflow", "NPflow_similarityMat_nocostC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_similarityMat_nocostC(Rcpp::wrap(cc));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List vclust2mcoclustC(NumericVector c) {
        typedef SEXP(*Ptr_vclust2mcoclustC)(SEXP);
        static Ptr_vclust2mcoclustC p_vclust2mcoclustC = NULL;
        if (p_vclust2mcoclustC == NULL) {
            validateSignature("List(*vclust2mcoclustC)(NumericVector)");
            p_vclust2mcoclustC = (Ptr_vclust2mcoclustC)R_GetCCallable("NPflow", "NPflow_vclust2mcoclustC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_vclust2mcoclustC(Rcpp::wrap(c));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

}

#endif // __NPflow_RcppExports_h__
