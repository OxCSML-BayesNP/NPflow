% Generated by roxygen2 (4.0.2): do not edit by hand
\name{mmvnpdfC_par}
\alias{mmvnpdfC_par}
\title{Parallel C++ implementation of multivariate Normal probability density function for multiple inputs}
\usage{
mmvnpdfC_par(x, mean, varcovM, Log = TRUE, ncores = 1L)
}
\arguments{
\item{x}{data matrix of dimension p x n, p being the dimension of the
data and n the number of data points}

\item{mean}{mean vectors matrix of dimension p x K, K being the number of
distributions for which the density probability has to be ealuated}

\item{varcovM}{list of length K of variance-covariance matrices,
each of dimensions p x p}

\item{logical}{flag for returning the log of the probability density
function. Defaults is \code{TRUE}}
}
\value{
matrix of densities of dimension K x n
}
\description{
Parallel C++ implementation of multivariate Normal probability density function for multiple inputs
}
\examples{
#NB: change ~/.R/Makevars 'CC' and 'CXX' to set the compiler
#either to 'gcc' and 'g++', or to 'clang' and 'clang++'
library(microbenchmark)

K=1000
d=10
z_mat <- NULL
m_list <- list()
m_mat <- NULL
S_list <- list()

for(i in 1:K){
z_mat <- c(z_mat, c(rep(1.96,d)))
m_list <- c(m_list, list(c(rep(-1.5,d))))
m_mat <- c(m_mat, c(rep(-1.5,d)))
S_list <- c(S_list, list(0.33*diag(d)))
}
z_mat <- matrix(z_mat, ncol=K, nrow=d)
m_mat <- matrix(m_mat, ncol=K, nrow=d)

microbenchmark(mvnpdf(x=z_mat, mean=m_list, varcovM=S_list, Log=FALSE),
              mmvnpdfC(x=z_mat, mean=m_mat, varcovM=S_list, Log=FALSE),
              mmvnpdfC_par(x=z_mat, mean=m_mat, varcovM=S_list, Log=FALSE,
                     ncores = 2),
              times=10L)
}

