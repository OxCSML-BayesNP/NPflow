// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// FmeasureC
double FmeasureC(NumericVector pred, NumericVector ref);
RcppExport SEXP NPflow_FmeasureC(SEXP predSEXP, SEXP refSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type pred(predSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type ref(refSEXP );
        double __result = FmeasureC(pred, ref);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Fmeasure_costC
List Fmeasure_costC(NumericMatrix c);
RcppExport SEXP NPflow_Fmeasure_costC(SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type c(cSEXP );
        List __result = Fmeasure_costC(c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// traceEpsC
NumericVector traceEpsC(NumericMatrix eps, NumericMatrix sigma);
RcppExport SEXP NPflow_traceEpsC(SEXP epsSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type eps(epsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP );
        NumericVector __result = traceEpsC(eps, sigma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mmvnpdfC
NumericMatrix mmvnpdfC(NumericMatrix x, NumericMatrix mean, List varcovM);
RcppExport SEXP NPflow_mmvnpdfC(SEXP xSEXP, SEXP meanSEXP, SEXP varcovMSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mean(meanSEXP );
        Rcpp::traits::input_parameter< List >::type varcovM(varcovMSEXP );
        NumericMatrix __result = mmvnpdfC(x, mean, varcovM);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mmvsnpdfC
NumericMatrix mmvsnpdfC(NumericMatrix x, NumericMatrix xi, NumericMatrix psi, List sigma);
RcppExport SEXP NPflow_mmvsnpdfC(SEXP xSEXP, SEXP xiSEXP, SEXP psiSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type xi(xiSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type psi(psiSEXP );
        Rcpp::traits::input_parameter< List >::type sigma(sigmaSEXP );
        NumericMatrix __result = mmvsnpdfC(x, xi, psi, sigma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mmvstpdfC
NumericMatrix mmvstpdfC(NumericMatrix x, NumericMatrix xi, NumericMatrix psi, List sigma, NumericVector df);
RcppExport SEXP NPflow_mmvstpdfC(SEXP xSEXP, SEXP xiSEXP, SEXP psiSEXP, SEXP sigmaSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type xi(xiSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type psi(psiSEXP );
        Rcpp::traits::input_parameter< List >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type df(dfSEXP );
        NumericMatrix __result = mmvstpdfC(x, xi, psi, sigma, df);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mmvtpdfC
NumericMatrix mmvtpdfC(NumericMatrix x, NumericMatrix mean, List varcovM, NumericVector df);
RcppExport SEXP NPflow_mmvtpdfC(SEXP xSEXP, SEXP meanSEXP, SEXP varcovMSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mean(meanSEXP );
        Rcpp::traits::input_parameter< List >::type varcovM(varcovMSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type df(dfSEXP );
        NumericMatrix __result = mmvtpdfC(x, mean, varcovM, df);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mvnpdfC
NumericVector mvnpdfC(NumericMatrix x, NumericVector mean, NumericMatrix varcovM);
RcppExport SEXP NPflow_mvnpdfC(SEXP xSEXP, SEXP meanSEXP, SEXP varcovMSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type varcovM(varcovMSEXP );
        NumericVector __result = mvnpdfC(x, mean, varcovM);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mvstlikC
List mvstlikC(NumericMatrix x, IntegerVector c, IntegerVector clustval, NumericMatrix xi, NumericMatrix psi, List sigma, NumericVector df, bool loglik);
RcppExport SEXP NPflow_mvstlikC(SEXP xSEXP, SEXP cSEXP, SEXP clustvalSEXP, SEXP xiSEXP, SEXP psiSEXP, SEXP sigmaSEXP, SEXP dfSEXP, SEXP loglikSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type c(cSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type clustval(clustvalSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type xi(xiSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type psi(psiSEXP );
        Rcpp::traits::input_parameter< List >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type df(dfSEXP );
        Rcpp::traits::input_parameter< bool >::type loglik(loglikSEXP );
        List __result = mvstlikC(x, c, clustval, xi, psi, sigma, df, loglik);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sampleClassC
IntegerVector sampleClassC(NumericMatrix probMat);
RcppExport SEXP NPflow_sampleClassC(SEXP probMatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type probMat(probMatSEXP );
        IntegerVector __result = sampleClassC(probMat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sampleClassC_bis
IntegerVector sampleClassC_bis(NumericMatrix probMat);
RcppExport SEXP NPflow_sampleClassC_bis(SEXP probMatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type probMat(probMatSEXP );
        IntegerVector __result = sampleClassC_bis(probMat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// similarityMatC
List similarityMatC(NumericMatrix c);
RcppExport SEXP NPflow_similarityMatC(SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type c(cSEXP );
        List __result = similarityMatC(c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
